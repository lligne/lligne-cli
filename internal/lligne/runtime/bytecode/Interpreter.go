//
// (C) Copyright 2023 Martin E. Nordberg III
// Apache 2.0 License
//

package bytecode

//=====================================================================================================================

type Interpreter struct {
	stack ValueStack
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) BoolAnd() {
	rhs := n.stack.PopBool()
	lhs := n.stack.PopBool()
	n.stack.PushBool(lhs && rhs)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) BoolGetResult() bool {
	return n.stack.PeekBool()
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) BoolLoadFalse() {
	n.stack.PushBool(false)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) BoolLoadTrue() {
	n.stack.PushBool(true)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) BoolOr() {
	rhs := n.stack.PopBool()
	lhs := n.stack.PopBool()
	n.stack.PushBool(lhs || rhs)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) Int64Add() {
	rhs := n.stack.PopInt64()
	lhs := n.stack.PopInt64()
	n.stack.PushInt64(lhs + rhs)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) Int64Divide() {
	rhs := n.stack.PopInt64()
	lhs := n.stack.PopInt64()
	n.stack.PushInt64(lhs / rhs)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) Int64GetResult() int64 {
	return n.stack.PeekInt64()
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) Int64LoadInt16(operand int16) {
	n.stack.PushInt64(int64(operand))
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) Int64LoadOne() {
	n.stack.PushInt64(1)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) Int64LoadZero() {
	n.stack.PushInt64(0)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) Int64Multiply() {
	rhs := n.stack.PopInt64()
	lhs := n.stack.PopInt64()
	n.stack.PushInt64(lhs * rhs)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) Int64Negate() {
	operand := n.stack.PopInt64()
	n.stack.PushInt64(-operand)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) Int64Subtract() {
	rhs := n.stack.PopInt64()
	lhs := n.stack.PopInt64()
	n.stack.PushInt64(lhs - rhs)
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) NoOp() {
	// no operation
}

//---------------------------------------------------------------------------------------------------------------------

func (n *Interpreter) Return() {
}

//=====================================================================================================================
