//
// (C) Copyright 2023 Martin E. Nordberg III
// Apache 2.0 License
//

package bytecode

import (
	"fmt"
	"strings"
)

//=====================================================================================================================

type Disassembler struct {
	output strings.Builder
	line   int
}

//---------------------------------------------------------------------------------------------------------------------

func (d *Disassembler) GetOutput() string {
	return d.output.String() + "\n"
}

//---------------------------------------------------------------------------------------------------------------------

func (d *Disassembler) Int64Add() {
	d.write("INT64_ADD")
}

//---------------------------------------------------------------------------------------------------------------------

func (d *Disassembler) Int64LoadInt16(operand int16) {
	d.writeInt16("INT64_LOAD_INT16", operand)
}

//---------------------------------------------------------------------------------------------------------------------

func (d *Disassembler) Int64LoadOne() {
	d.write("INT64_LOAD_ONE")
}

//---------------------------------------------------------------------------------------------------------------------

func (d *Disassembler) Int64LoadZero() {
	d.write("INT64_LOAD_ZERO")
}

//---------------------------------------------------------------------------------------------------------------------

func (d *Disassembler) NoOp() {
	d.write("NO_OP")
}

//---------------------------------------------------------------------------------------------------------------------

func (d *Disassembler) Return() {
	d.write("RETURN")
}

//---------------------------------------------------------------------------------------------------------------------

func (d *Disassembler) write(opCode string) {
	d.output.WriteString("\n")
	d.line += 1
	d.output.WriteString(fmt.Sprintf("%4d  %s", d.line, opCode))
}

//---------------------------------------------------------------------------------------------------------------------

func (d *Disassembler) writeInt16(opCode string, operand int16) {
	d.output.WriteString("\n")
	d.line += 1
	d.output.WriteString(fmt.Sprintf("%4d  %-20s %6d", d.line, opCode, operand))
}

//=====================================================================================================================
